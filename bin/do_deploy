#!/usr/bin/env bash
# Copyright (C) 2018 Google Inc.
# Licensed under http://www.apache.org/licenses/LICENSE-2.0 <see LICENSE file>

set -o errexit
set -o nounset

if [[ -z "${1:-}" ]] || [[ -z "${2:-}" ]] || [[ -z "${3:-}" ]]
then
  echo "Usage `basename ${0}` <settings_file> <service-account> <key-file>"
  exit
fi

SETTINGS_FILE="$1"
ACCOUNT="$2"
KEY_FILE="$3"

VERSION="1"


write_visible_message () {
  message=${1:-}
  echo '-----'
  echo ${message}
  echo '-----'
}


set +o nounset  # this file is autogenerated so we can ignore unset vars
source /vagrant/bin/init_vagrant_env
set -o nounset

write_visible_message 'Setting build hash into version info'
./git_hooks/post-checkout

write_visible_message 'Generating app.yaml'
deploy_appengine "$SETTINGS_FILE"
cat /vagrant/src/app.yaml

source "$SETTINGS_FILE"
export GGRC_SETTINGS_MODULE="$SETTINGS_MODULE"

write_visible_message 'Setting project into config'
gcloud config set project "$APPENGINE_INSTANCE"

write_visible_message 'Authenticating'
gcloud auth activate-service-account "$ACCOUNT" --key-file="$KEY_FILE"

version_script () {
  declare -r SETTINGS_FILE="src/ggrc/settings/default.py"
  if [ -z ${KOKORO+x} ]
  then
    declare -r TARGET_REF="FETCH_HEAD"
  else
    declare -r TARGET_REF="HEAD"
  fi

  cat <<EOF
BUILD_NUMBER = ""
$(git grep -h "VERSION =" $TARGET_REF -- $SETTINGS_FILE)
print VERSION
EOF
}

if [[ "$VERSION" == "AUTO" ]]
then
  GGRC_VERSION=$(version_script | python -)
  if [ -z ${KOKORO+x} ]
  then
    GGRC_HASH="$(git rev-parse FETCH_HEAD)"
  else
    GGRC_HASH="$(git rev-parse HEAD)"
  fi
  VERSION="$GGRC_VERSION-$GGRC_HASH"
  # The following expression extracts a valid version name.
  # According to gcloud:
  # argument --version/-v: May only contain lowercase letters, digits, and
  #   hyphens. Must begin and end with a letter or digit. Must not exceed 63
  #   characters.
  #
  #  tr '[:upper:]' '[:lower:]' - change all characters to lower case
  #  sed 's/[^a-z0-9]/-/g'      - replace all non supported characters to
  #                               hyphens. We do this because of version number
  #                               that contains dots or spaces.
  #  sed 's/^[^a-z0-9]*//'      - make sure version starts with a letter or
  #                               digit
  #  sed 's/[^a-z0-9]*$//'      - make sure version ends with a letter or digit
  #  cut -c 1-40                - trim line length to max 63 characters
  #
  # Note: this will due to the hash number, this will always produce a valid
  # version string.
  #
  # Note: we trim the version string to 40 characters instead of 63 because
  # the subdomain section can not exceed 63 characters but the actual URL is
  # composed from <version-number>-dot-<instance-name>.appspot.com. Even this
  # 30 character limit will not be good if we have a long instance name.
  # The Only thing that goes wrong in such a case is Migrations FAIL. The
  # deployment and the app is still accessible on the default URL
  # <instance-name>.appspot.com.
  VERSION=$(echo "$VERSION" | \
    tr '[:upper:]' '[:lower:]' | \
    sed 's/[^a-z0-9]/-/g' | \
    sed 's/^[^a-z0-9]*//' | \
    sed 's/[^a-z0-9]*$//' | \
    cut -c 1-30 \
  )
fi

write_visible_message "Deploying src/app.yaml into version $VERSION"

gcloud app deploy src/app.yaml --version="$VERSION"

if [[ ! "${APPENGINE_INSTANCE}" == *"google.com:"* ]]
then
  yes | gcloud app deploy src/cron.yaml
  yes | gcloud app deploy src/queue.yaml
fi

if [[ ! "${APPENGINE_INSTANCE}" == *"google.com:"* ]]
then
  write_visible_message <<EOF
Running migrations with: '$VERSION' '$APPENGINE_INSTANCE' '$ACCESS_TOKEN'
EOF
  python ./bin/trigger_migrations.py $VERSION $APPENGINE_INSTANCE $ACCESS_TOKEN
fi
