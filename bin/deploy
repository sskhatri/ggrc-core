#!/usr/bin/env bash

set -o errexit
set -o nounset

declare -r SCRIPTPATH=$( cd "$(dirname "$0")" ; pwd -P )
declare -r TARGET_REMOTE="upstream"

declare -r SETTINGS_FILENAME="settings.sh"
declare -r ENV_OVERRIDE_FILENAME="override.sh"
declare -r SERVICE_ACCOUNT_FILENAME="service-account"
declare -r DEPLOY_PREFIX="extras/deploy"

cd "${SCRIPTPATH}/../"
source "$SCRIPTPATH/util.sh"

usage () {
  cat <<EOF
Usage: $(basename ${0}) SERVICE [TARGET_REF]

Arguments:
  SERVICE      Target service to deploy
  TARGET_REF   Git-compliant reference of a version to deploy

If TARGET_REF is passed, the script will fetch and checkout it from
$TARGET_REMOTE.
If no TARGET_REF is passed, the script will fetch nothing.

Note: the script expects several prerequisites:
  - all deployment-specific files are be located at
    <project_root>/extras/deploy/<service>/. For example:
    ~/projects/ggrc-core/extras/deploy/ggrc-dev/
  - file with deployment-specific is extras/deploy/<service>/settings.sh
  - file with env override variables is extras/deploy/<service>/override.sh
  - file with service account name is extras/deploy/<service>/service-account.
    Example content: test-account@ggrc-dev.iam.gserviceaccount.com.key
  - file with service account private key is
    extras/deploy/<service>/<account@...>.key. For example:
    extras/deploy/ggrc-dev/test-account@ggrc-dev.iam.gserviceaccount.com.key

Example usage:
  $(basename ${0}) 0.10.23-Raspberry ggrc-dev
EOF
}

fail_invalid_usage () {
  usage >&2
  exit 1
}

main () {
  local SERVICE="${1:-}"
  local TARGET_REF="${2:-}"

  if [[ -z "$SERVICE" ]]; then
    fail_invalid_usage
  fi

  if [[ ! -z "$TARGET_REF" ]]; then
    git fetch "$TARGET_REMOTE" "$TARGET_REF"
    git checkout FETCH_HEAD
  fi

  local -r SETTINGS_FILE="$DEPLOY_PREFIX/$SERVICE/$SETTINGS_FILENAME"
  local -r ENV_OVERRIDE_FILE="$DEPLOY_PREFIX/$SERVICE/$ENV_OVERRIDE_FILENAME"
  local -r ACCOUNT_FILE="$DEPLOY_PREFIX/$SERVICE/$SERVICE_ACCOUNT_FILENAME"
  local PROJECT="deploy-$SERVICE"

  local FILE_MISSING=""
  if [[ ! -f "$SETTINGS_FILE" ]]; then
    echo "No settings file found at '$SETTINGS_FILE'" >&2
    FILE_MISSING="yes"
  fi
  if [[ ! -f "$ENV_OVERRIDE_FILE" ]]; then
    echo "No settings override file found at '$ENV_OVERRIDE_FILE'" >&2
    FILE_MISSING="yes"
  fi
  if [[ ! -f "$ACCOUNT_FILE" ]]; then
    echo "No service-account file found at '$ACCOUNT_FILE'" >&2
    local -r ACCOUNT=""
    FILE_MISSING="yes"
  else
    local -r ACCOUNT="$(<$ACCOUNT_FILE)"
  fi

  local -r KEY_FILE="$DEPLOY_PREFIX/$SERVICE/$ACCOUNT.key"
  if [[ -f "$ACCOUNT_FILE" && ! -f "$KEY_FILE" ]]; then
    echo "No private key file found at '$KEY_FILE'" >&2
    FILE_MISSING="yes"
  fi

  if [[ -n "$FILE_MISSING" ]]; then
    return -1
  fi

  PROJECT=$(clean_project_name "$PROJECT")
  ./bin/containers setup deploy "$PROJECT"

  echo "Running deploy"

  docker exec -i "${PROJECT}_cleandev_1" su root -c "
    export ENV_OVERRIDE_FILE=$ENV_OVERRIDE_FILE
    /vagrant/bin/do_deploy $SETTINGS_FILE $ACCOUNT $KEY_FILE
  " ; rc=$?

  ./bin/containers stop deploy "$PROJECT"
  exit $rc
}

main "$@"
